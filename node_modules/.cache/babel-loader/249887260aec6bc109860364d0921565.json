{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error('Could not fetch data from server');\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsLoading(false);\n      setError(null);\n    }).catch(err => {\n      setIsLoading(false);\n      setError(err.message);\n    });\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"oHNKtHcXBLfWEYHeRSlN5KEv5w0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/Stevie/new-task-manager-app/src/Components/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","fetch","then","res","ok","Error","json","catch","err","message"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAA/B;AACA,QAAK,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAK,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAACP,GAAD,CAAL,CACCQ,IADD,CACMC,GAAG,IAAI;AACX,UAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACT,cAAMC,KAAK,CAAC,kCAAD,CAAX;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAND,EAOCJ,IAPD,CAOMP,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAXD,EAYCO,KAZD,CAYOC,GAAG,IAAG;AACXV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACQ,GAAG,CAACC,OAAL,CAAR;AACD,KAfD;AAgBD,GAjBM,EAiBJ,CAACf,GAAD,CAjBI,CAAT;AAmBE,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACL,CAzBD;;GAAMN,Q;;AA2BN,eAAeA,QAAf","sourcesContent":["import {useState, useEffect} from 'react'\r\n\r\nconst useFetch = (url) => {\r\n    const[data, setData] = useState(null)\r\n    const[isLoading, setIsLoading] = useState(true)\r\n    const[error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n        .then(res => {\r\n          if(!res.ok){\r\n            throw Error('Could not fetch data from server');\r\n          }\r\n          return res.json();\r\n        })\r\n        .then(data => {\r\n          setData(data)\r\n          setIsLoading(false)\r\n          setError(null);\r\n        })\r\n        .catch(err =>{\r\n          setIsLoading(false);\r\n          setError(err.message);\r\n        })\r\n      }, [url]);\r\n\r\n      return {data, isLoading, error};\r\n}\r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}