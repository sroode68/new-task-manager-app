{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setIsLoading(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          // auto catches network / connection error\n          setIsLoading(false);\n          setError(err.message);\n        }\n      });\n    }, 1000); // abort the fetch\n\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"oHNKtHcXBLfWEYHeRSlN5KEv5w0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/Stevie/new-task-manager-app/src/Components/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","isPending"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAA/B;AACA,QAAK,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAK,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AAAE;AACb,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAND,EAOCJ,IAPD,CAOMX,IAAI,IAAI;AACZG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAXD,EAYCW,KAZD,CAYOC,GAAG,IAAI;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,SAFD,MAEO;AACL;AACAjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACD;AACF,OApBD;AAqBD,KAtBS,EAsBP,IAtBO,CAAV,CAHc,CA2Bd;;AACA,WAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;AACD,GA7BQ,EA6BN,CAACvB,GAAD,CA7BM,CAAT;AA+BA,SAAO;AAAEC,IAAAA,IAAF;AAAQuB,IAAAA,SAAR;AAAmBnB,IAAAA;AAAnB,GAAP;AACD,CArCH;;GAAMN,Q;;AAuCN,eAAeA,QAAf","sourcesContent":["import {useState, useEffect} from 'react'\r\n\r\nconst useFetch = (url) => {\r\n    const[data, setData] = useState(null)\r\n    const[isLoading, setIsLoading] = useState(true)\r\n    const[error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n      const abortCont = new AbortController();\r\n  \r\n      setTimeout(() => {\r\n        fetch(url, { signal: abortCont.signal })\r\n        .then(res => {\r\n          if (!res.ok) { // error coming back from server\r\n            throw Error('could not fetch the data for that resource');\r\n          } \r\n          return res.json();\r\n        })\r\n        .then(data => {\r\n          setIsLoading(false);\r\n          setData(data);\r\n          setError(null);\r\n        })\r\n        .catch(err => {\r\n          if (err.name === 'AbortError') {\r\n            console.log('fetch aborted')\r\n          } else {\r\n            // auto catches network / connection error\r\n            setIsLoading(false);\r\n            setError(err.message);\r\n          }\r\n        })\r\n      }, 1000);\r\n  \r\n      // abort the fetch\r\n      return () => abortCont.abort();\r\n    }, [url])\r\n  \r\n    return { data, isPending, error };\r\n  }\r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}